name: Update GFW Rules

on:
  schedule:
    - cron: "0 */2 * * *"   # 每2个小时（UTC时间）跑一次
  workflow_dispatch:       # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 第一步：检出你的仓库代码
      - name: Checkout repo
        uses: actions/checkout@v3

      # 第二步：安装脚本依赖的工具
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y wget

      # 第三步：运行脚本，生成新的 gfw.conf 文件
      - name: Build gfw.conf
        run: bash build-gfw.sh

      # 第四步：比对文件内容，但忽略第一行，然后设置输出变量
      - name: Check for file changes (ignore first line)
        id: git-check
        run: |
          if ! diff -q <(tail -n +2 gfw.conf) <(git show HEAD:gfw.conf 2>/dev/null | tail -n +2); then
            # 使用 ::notice:: 创建一个醒目的日志标注
            echo "::notice::Rule changes detected (ignoring header). Proceeding to commit."
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            # 使用 ::notice:: 创建一个醒目的日志标注
            echo "::notice::No rule changes detected (ignoring header). Skipping commit."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      # 第五步：如果上一步检测到有变更，则执行 commit 和 push
      - name: Commit and push if changed
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add gfw.conf
          git commit -m "Auto update gfw.conf at $(date '+%F %T')"
          git push

      # 新增！第六步：任务总结，此步骤总是会执行
      - name: Job Summary
        # 使用 always() 确保无论前面的步骤是否被跳过，此步骤都会运行
        if: always()
        run: |
          # 根据 git-check 步骤的输出结果，打印不同的总结信息
          if [[ ${{ steps.git-check.outputs.changes }} == 'true' ]]; then
            echo "✅ 本次运行完成：检测到规则更新，并已成功推送到仓库。"
          else
            echo "☑️ 本次运行完成：规则列表无变化，未执行任何推送操作。"
          fi
