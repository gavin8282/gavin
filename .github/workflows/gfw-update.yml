name: Update GFW Rules

on:
  schedule:
    - cron: "0 0 * * *"   # 每天0点（UTC时间）跑一次
  workflow_dispatch:       # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 第一步：检出你的仓库代码
      - name: Checkout repo
        uses: actions/checkout@v3

      # 第二步：安装脚本依赖的工具
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y wget

      # 第三步：运行脚本，生成新的 gfw.conf 文件
      - name: Build gfw.conf
        run: bash build-gfw.sh

      # 第四步：比对文件内容，但忽略第一行，然后设置输出变量
      - name: Check for file changes (ignore first line)
        id: git-check
        run: |
          # 核心逻辑：
          # 使用 diff 命令直接比较新旧文件的内容（从第二行开始）。
          # `git show HEAD:gfw.conf` 获取上一次commit中的文件内容。
          # `2>/dev/null` 用于防止在文件首次创建时因找不到旧文件而报错。
          # `!` 将 diff 的退出码反转，因此只有当文件内容有差异时，if 条件才成立。
          if ! diff -q <(tail -n +2 gfw.conf) <(git show HEAD:gfw.conf 2>/dev/null | tail -n +2); then
            echo "Rule changes detected (ignoring header). Proceeding to commit."
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No rule changes detected (ignoring header). Skipping commit."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      # 第五步：如果上一步检测到有变更，则执行 commit 和 push
      - name: Commit and push if changed
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add gfw.conf
          git commit -m "Auto update gfw.conf at $(date '+%F %T')"
          git push
